---
import { Image } from 'astro:assets';
import '../styles/components/avatar.css'

interface Props {
  src: ImageMetadata;
  alt: string;
  size?: string;
}

const { src, alt, size = "w-32 h-32" } = Astro.props;
---

<div id="avatar-3d" class={`${size} mx-auto mb-8 relative`}>
  <!-- Fondo degradado animado -->
  <div class="morph-bg absolute inset-[-15px] bg-gradient-to-r from-indigo-500 via-purple-500 to-cyan-500 blur-xl opacity-60"></div>
  
  <!-- Contenedor de imagen -->
  <div class="w-full h-full rounded-full overflow-hidden relative z-10 border-2 border-white/10">
    <Image 
      src={src} 
      alt={alt} 
      class="w-full h-full object-cover" 
      width={1000} 
      height={1000}
      quality={90}
      loading="lazy"
    />
  </div>
</div>

<script>
  // Efecto 3D solo en desktop
  const avatar = document.getElementById('avatar-3d');
  
  if (avatar && window.matchMedia('(min-width: 768px)').matches) {
    const MAX_ROTATION = 15;
    
    // Transici칩n suave
    avatar.style.transition = 'transform 0.2s ease-out';
    
    document.addEventListener('mousemove', (e) => {
      const rect = avatar.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const centerY = rect.top + rect.height / 2;
      
      // Calcular 치ngulos de rotaci칩n
      const distX = e.clientX - centerX;
      const distY = e.clientY - centerY;
      
      const rotateY = Math.min(Math.max(-MAX_ROTATION, distX / 10), MAX_ROTATION);
      const rotateX = Math.min(Math.max(-MAX_ROTATION, -distY / 10), MAX_ROTATION);
      
      avatar.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale3d(1.02, 1.02, 1.02)`;
    });
    
    // Resetear transformaci칩n
    document.addEventListener('mouseleave', () => {
      avatar.style.transform = 'perspective(1000px) rotateX(0) rotateY(0) scale3d(1, 1, 1)';
    });
  }
</script>