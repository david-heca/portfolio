---
import { ViewTransitions } from 'astro:transitions';
import '../styles/global.css';

export interface Props {
  title: string;
  description: string;
  lang?: 'es' | 'en';
  ogImage?: string;
}

const { title, description, lang = 'es', ogImage } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html lang={lang} class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImage || "/assets/og-image.jpg"} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={ogImage || "/assets/og-image.jpg"} />
    
    <!-- Preload critical resources -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap" rel="stylesheet" />
    
    <title>{title}</title>
    
    <!-- Theme script (runs before page load to prevent flash) -->
    <script is:inline>
      // Función global para aplicar tema
      window.applyTheme = function(theme) {
        console.log('Applying theme:', theme);
        if (theme === 'dark') {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
        if (typeof localStorage !== 'undefined') {
          localStorage.setItem('theme', theme);
        }
      };
      
      // Función global para obtener tema
      window.getTheme = function() {
        if (typeof localStorage !== 'undefined') {
          const saved = localStorage.getItem('theme');
          if (saved && (saved === 'dark' || saved === 'light')) {
            return saved;
          }
        }
        return 'dark'; // Default
      };
      
      // Aplicar tema inicial INMEDIATAMENTE
      const theme = window.getTheme();
      window.applyTheme(theme);
      
      // Proteger contra cambios no deseados
      const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
          if (mutation.attributeName === 'class') {
            const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
            const expectedTheme = window.getTheme();
            
            if (currentTheme !== expectedTheme) {
              console.log('Theme mismatch detected! Restoring...', currentTheme, '->', expectedTheme);
              window.applyTheme(expectedTheme);
            }
          }
        });
      });
      
      observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
    </script>
    
    <!-- View Transitions -->
    <ViewTransitions />
  </head>
  
  <body class="bg-white dark:bg-gray-950 text-gray-900 dark:text-gray-100 transition-colors duration-300">
    <slot />
    
    <!-- Theme toggle script -->
    <script>
      // Usar las funciones globales con acceso dinámico
      function toggleTheme() {
        const currentTheme = (window as any).getTheme();
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        console.log('Toggle: from', currentTheme, 'to', newTheme); // Debug
        (window as any).applyTheme(newTheme);
        console.log('Toggle completed'); // Debug
      }
      
      function setupThemeToggle() {
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle && !themeToggle.hasAttribute('data-theme-setup')) {
          themeToggle.addEventListener('click', toggleTheme);
          themeToggle.setAttribute('data-theme-setup', 'true');
          console.log('Theme toggle setup complete'); // Debug
        }
      }
      
      document.addEventListener('DOMContentLoaded', setupThemeToggle);
      document.addEventListener('astro:page-load', setupThemeToggle);
      
      // Re-aplicar tema después de transiciones
      document.addEventListener('astro:after-swap', function() {
        console.log('After swap - reapplying theme...'); // Debug
        const theme = (window as any).getTheme();
        (window as any).applyTheme(theme);
        setupThemeToggle(); // Re-configurar el toggle también
      });
    </script>
  </body>
</html>
